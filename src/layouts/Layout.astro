---
import { ViewTransitions } from "astro:transitions";
import "@fontsource/inter/latin-100.css";
import "@fontsource/poppins";
import Menu from "@/components/Menu.astro";
import Footer from "@/components/Footer.astro";

interface Props {
  title: string;
  description: string;
  image?: string;
}

const { title, description, image } = Astro.props;

Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=300, s-maxage=3600"
);
---

<!doctype html>
<html lang="en" class="dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href=`/favicon.svg` />
    <title>{title}</title>
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    {image && <meta property="og:image" content={image} />}
    <ViewTransitions />
  </head>
  <body class="bg-gray-50 dark:bg-brand-950 overflow-x-hidden w-full">
    <Menu />
    <slot />
    <Footer />
    <style is:global>
      /* Register your custom font family and tell the browser where to find it. */
      @font-face {
        font-family: "StretchPro";
        src: url("/fonts/StretchPro.woff") format("woff");
        font-weight: normal;
        font-style: normal;
        font-display: swap;
      }

      html {
        font-family: "Poppins", sans-serif;
        width: 100%;
        height: 100%;
      }
    </style>
    <script>
      document.addEventListener("astro:page-load", () => {
        const themeToggleDarkIcon = document.getElementById(
          "theme-toggle-dark-icon"
        );
        const themeToggleLightIcon = document.getElementById(
          "theme-toggle-light-icon"
        );
        const themeToggleBtn = document.getElementById("theme-toggle");

        const handleClick = () => {
          // toggle icons inside button
          themeToggleDarkIcon?.classList.toggle("hidden");
          themeToggleLightIcon?.classList.toggle("hidden");

          // if set via local storage previously
          if (localStorage.getItem("color-theme")) {
            if (localStorage.getItem("color-theme") === "light") {
              document.documentElement.classList.add("dark");
              localStorage.setItem("color-theme", "dark");
            } else {
              document.documentElement.classList.remove("dark");
              localStorage.setItem("color-theme", "light");
            }
          }
        };

        var isNavOpen = false;
        const but = document.querySelector("#menuNavMobileBut");
        const menu = document.querySelector("#menuNavMobile");

        const menuHideClasses = "-translate-y-[120vh]";

        const handleNav = () => {
          if (isNavOpen) {
            menu?.classList.toggle(menuHideClasses);
            isNavOpen = false;
          } else {
            menu?.classList.toggle(menuHideClasses);
            isNavOpen = true;
          }
        };

        //if not localStorage found set by browser default
        if (!("color-theme" in localStorage)) {
          if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
            localStorage.setItem("color-theme", "dark");
          } else {
            localStorage.setItem("color-theme", "light");
          }
        }

        // Change the icons inside the button based on previous settings
        if (localStorage.getItem("color-theme") === "light") {
          document.documentElement.classList.remove("dark");
          themeToggleDarkIcon?.classList.add("hidden");
          themeToggleLightIcon?.classList.remove("hidden");
        } else {
          document.documentElement.classList.add("dark");
          themeToggleLightIcon?.classList.add("hidden");
          themeToggleDarkIcon?.classList.remove("hidden");
        }

        themeToggleBtn?.addEventListener("click", handleClick);

        but?.addEventListener("click", handleNav);
      });
    </script>
  </body>
</html>
